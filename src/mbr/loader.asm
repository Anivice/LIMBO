[bits 16]                                   ; 16-bit mode

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  _____  _____   ____   _____ _____            __  __   _    _ ______          _____  ______ _____  ;;
;; |  __ \|  __ \ / __ \ / ____|  __ \     /\   |  \/  | | |  | |  ____|   /\   |  __ \|  ____|  __ \ ;;
;; | |__) | |__) | |  | | |  __| |__) |   /  \  | \  / | | |__| | |__     /  \  | |  | | |__  | |__) |;;
;; |  ___/|  _  /| |  | | | |_ |  _  /   / /\ \ | |\/| | |  __  |  __|   / /\ \ | |  | |  __| |  _  / ;;
;; | |    | | \ \| |__| | |__| | | \ \  / ____ \| |  | | | |  | | |____ / ____ \| |__| | |____| | \ \ ;;
;; |_|    |_|  \_\\____/ \_____|_|  \_\/_/    \_\_|  |_| |_|  |_|______/_/    \_\_____/|______|_|  \_\;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
segment head align=16 vstart=0
    dw _program_end                         ; program length                                    +0
    dw _entry_point                         ; program entry point(index) in code segmentation   +2
    dw _data_start                          ; data segmentation start point                     +4
    dw _data_end                            ; data segmentation end point                       +6
    dw _code_start                          ; code segmentation start point                     +8
    dw _code_end                            ; code segmentation end point                       +10
    dw _stack_start                         ; stack segmentation start point                    +12
    dw _stack_end                           ; stack segmentation end point                      +14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   _____ ____  _____  ______    _____ ______ _____ __  __ ______ _   _ _______ ;;
;;  / ____/ __ \|  __ \|  ____|  / ____|  ____/ ____|  \/  |  ____| \ | |__   __|;;
;; | |   | |  | | |  | | |__    | (___ | |__ | |  __| \  / | |__  |  \| |  | |   ;;
;; | |   | |  | | |  | |  __|    \___ \|  __|| | |_ | |\/| |  __| | . ` |  | |   ;;
;; | |___| |__| | |__| | |____   ____) | |___| |__| | |  | | |____| |\  |  | |   ;;
;;  \_____\____/|_____/|______| |_____/|______\_____|_|  |_|______|_| \_|  |_|   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
segment _code_head align=16
_code_start:

segment code align=16 vstart=0
print: ;print_msg(si=null terminated msg)
    pusha
    .print_hello:
        mov         ah,                     0x0E
        mov         al,                     [ds:si]
        ; check if al is null
        cmp         al,                     0x00
        ; is null, exit
        je          .print_hello_end
        ; not null, print
        int         0x10
        inc         si
        jmp         .print_hello
    .print_hello_end:
    popa
    ret

_entry_point: ; _entry_point()
    pusha
    push        es
    push        ds
    push        ss

    ; print greeting message:
    mov         si,         greet
    call        print

    pop         ss
    pop         ds
    pop         es
    popa
    retf                                    ; since we did a far call, we use a far return
segment _code_tail align=16
_code_end:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  _____       _______          _____ ______ _____ __  __ ______ _   _ _______ ;;
;; |  __ \   /\|__   __|/\      / ____|  ____/ ____|  \/  |  ____| \ | |__   __|;;
;; | |  | | /  \  | |  /  \    | (___ | |__ | |  __| \  / | |__  |  \| |  | |   ;;
;; | |  | |/ /\ \ | | / /\ \    \___ \|  __|| | |_ | |\/| |  __| | . ` |  | |   ;;
;; | |__| / ____ \| |/ ____ \   ____) | |___| |__| | |  | | |____| |\  |  | |   ;;
;; |_____/_/    \_\_/_/    \_\ |_____/|______\_____|_|  |_|______|_| \_|  |_|   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
segment _data_head align=16
_data_start:

segment data align=16 vstart=0
greet:
    db "                    LIMBO KERNEL LOADER VERSION 0.0.1", 0x0D, 0x0A, 0x00
segment _data_tail align=16
_data_end:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   _____ _______       _____ _  __   _____ ______ _____ __  __ ______ _   _ _______ ;;
;;  / ____|__   __|/\   / ____| |/ /  / ____|  ____/ ____|  \/  |  ____| \ | |__   __|;;
;; | (___    | |  /  \ | |    | ' /  | (___ | |__ | |  __| \  / | |__  |  \| |  | |   ;;
;;  \___ \   | | / /\ \| |    |  <    \___ \|  __|| | |_ | |\/| |  __| | . ` |  | |   ;;
;;  ____) |  | |/ ____ \ |____| . \   ____) | |___| |__| | |  | | |____| |\  |  | |   ;;
;; |_____/   |_/_/    \_\_____|_|\_\ |_____/|______\_____|_|  |_|______|_| \_|  |_|   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
segment _stack_reserved align=16
_stack_start:
    resb 0x1FF
_stack_end:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  _____  _____   ____   _____ _____            __  __   _______       _____ _      ;;
;; |  __ \|  __ \ / __ \ / ____|  __ \     /\   |  \/  | |__   __|/\   |_   _| |     ;;
;; | |__) | |__) | |  | | |  __| |__) |   /  \  | \  / |    | |  /  \    | | | |     ;;
;; |  ___/|  _  /| |  | | | |_ |  _  /   / /\ \ | |\/| |    | | / /\ \   | | | |     ;;
;; | |    | | \ \| |__| | |__| | | \ \  / ____ \| |  | |    | |/ ____ \ _| |_| |____ ;;
;; |_|    |_|  \_\\____/ \_____|_|  \_\/_/    \_\_|  |_|    |_/_/    \_\_____|______|;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
segment tail align=16
_program_end:
    ; this is just used to fill the parts not in the alignment with 0
    times 16 db 0
